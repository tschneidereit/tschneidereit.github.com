<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Till Schneidereit]]></title>
  <link href="http://tschneidereit.github.io/atom.xml" rel="self"/>
  <link href="http://tschneidereit.github.io/"/>
  <updated>2013-07-01T05:27:23+02:00</updated>
  <id>http://tschneidereit.github.io/</id>
  <author>
    <name><![CDATA[Till Schneidereit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Editing Git and Mercurial Commit Messages With Sublime Text 2]]></title>
    <link href="http://tschneidereit.github.io/2012/05/14/editing-git-commit-messages-with-sublime-text-2/"/>
    <updated>2012-05-14T01:37:00+02:00</updated>
    <id>http://tschneidereit.github.io/2012/05/14/editing-git-commit-messages-with-sublime-text-2</id>
    <content type="html"><![CDATA[<p>Not only is <a href="http://www.sublimetext.com/">Sublime Text 2</a> a fabulous code editor &ndash; it also works very well as an editor for shell commands.</p>

<p>At least for me, a major use-case for invoking an editor from the shell is editing commit messages in <a href="http://git-scm.com/">Git</a> and <a href="http://mercurial.selenic.com/">Mercurial</a>. Now simply setting <code>sub</code>, the shell command for invoking Sublime Text 2, as Git&rsquo;s or Mercurial&rsquo;s editor won&rsquo;t work for that: sub returns immediately instead of waiting for the commit message to be written and saved.</p>

<p>Enter <code>sub --wait</code>. With the <code>--wait</code> (or <code>-w</code>) argument, <code>sub</code> doesn&rsquo;t return until the file has been closed. The beauty of it is that it&rsquo;s not necessary to close the entire application: as soon as the <code>sub</code>-opened file is closed, <code>sub</code> returns <em>and the terminal window is focused again</em>!</p>

<h2>Wow, cool! But how?</h2>

<p>While I don&rsquo;t know a thing about how <code>sub</code> does this, I <em>do</em> know how to set things to use it.</p>

<p>For Git, run the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global core.editor "sub --wait"</span></code></pre></td></tr></table></div></figure>


<p>For Mercurial, edit the file <code>~/.hgrc</code> and add the following line under <code>[ui]</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>editor = sub --wait</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Eclipse CDT To Work On SpiderMonkey]]></title>
    <link href="http://tschneidereit.github.io/2012/05/09/setting-up-cdt-to-work-on-spidermonkey/"/>
    <updated>2012-05-09T14:01:00+02:00</updated>
    <id>http://tschneidereit.github.io/2012/05/09/setting-up-cdt-to-work-on-spidermonkey</id>
    <content type="html"><![CDATA[<p><em>Note: This text has since been <a href="https://developer.mozilla.org/en/SpiderMonkey/Setting_up_CDT_to_work_on_SpiderMonkey">added to MDN</a>, so that version is very likely to be more up-to-date than this one, depending on when you&rsquo;re reading this.</em></p>

<p>The version of <a href="http://wiki.eclipse.org/CDT/">Eclipse&rsquo;s CDT</a> that&rsquo;s will be released with the <a href="">next major release of Eclipse, codenamed &ldquo;Juno&rdquo;</a>, has <a href="http://wiki.eclipse.org/CDT/User/NewIn81">some pretty decent features</a> that make it an attractive environment to work in.</p>

<p>Over at the <a href="https://developer.mozilla.org/">Mozilla Developer Network</a>, there&rsquo;s a guide for setting up CDT to work with the Mozilla codebase. As that guide is a bit outdated and doesn&rsquo;t cover setting things up for just SpiderMonkey instead of the whole Mozilla codebase, here&rsquo;s a short-ish guide for doing just that:</p>

<h2>Step 1 &ndash; Preparing a SpiderMonkey build</h2>

<p>For CDT to index all code, SpiderMonkey has to be built with debug information. The full process of and requisites for doing so are described <a href="https://developer.mozilla.org/en/Building_only_SpiderMonkey#Advanced_build">on MDN</a>. Please follow those instructions up until the point of invoking <code>configure</code>.</p>

<p>I prefer building with clang, so my modified build commands look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir _DBG.OBJ
</span><span class='line'>cd _DBG.OBJ
</span><span class='line'>CC='clang -Qunused-arguments -fcolor-diagnostics' CXX='clang++ -Qunused-arguments -fcolor-diagnostics' ../configure --enable-debug --disable-optimize --enable-debug-symbols</span></code></pre></td></tr></table></div></figure>


<p><em>Note: due to <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=378984">a bug in CDT</a>, it&rsquo;s currently not possible (or at least not straight-forward) to build with ccache. See Step 4 below for a workaround.</em></p>

<h2>Step 2 &ndash; Installing Eclipse and Setting Up the Project</h2>

<p>The following run-down is a condensed and updated version of what&rsquo;s explained in much more detail on MDN <a href="https://developer.mozilla.org/en/Eclipse_CDT">for the entire Mozilla codebase</a>. Luckily, improvements in CDT have reduced the basic process to a manageable 10 steps:</p>

<ol>
<li>Download and extract &ldquo;Eclipse IDE for C/C++ Developers&rdquo; from the <a href="http://www.eclipse.org/downloads/index-developer.php">Eclipse Developer builds</a></li>
<li>Download the latest snapshot of the CDT from <a href="https://hudson.eclipse.org/hudson/job/cdt-sd90/">Eclipse&rsquo;s CI server</a> <em>without extracting the contents</em></li>
<li>Start Eclipse and create a workspace somewhere</li>
<li>Select &ldquo;Install New Software&hellip;&rdquo; from the &ldquo;Help&rdquo; menu</li>
<li>Click the &ldquo;Add&hellip;&rdquo; button in the upper right to add a repository, then click on &ldquo;Archive&hellip;&rdquo; and select the CDT snapshot (use &ldquo;sd90-snapshot&rdquo; or something similar as the name)</li>
<li>Select &ldquo;C/C++ Development Tools&rdquo; from &ldquo;CDT Main Features&rdquo; and whatever you want from &ldquo;CDT Optional Features&rdquo; and click &ldquo;Next&rdquo; and agree to licenses and installing unsigned packages and all that jazz until you&rsquo;re prompted to restart</li>
<li>Restart Eclipse</li>
<li>Back in Eclipse, select &ldquo;New > Makefile Project with Existing Code&rdquo; from the &ldquo;File&rdquo; menu</li>
<li>Give the project a name you like (&ldquo;SpiderMonkey&rdquo; has a nice ring to it) and use the &ldquo;Browser&hellip;&rdquo; button to select your checkout&rsquo;s <code>js/src</code> folder for the &ldquo;Existing Code Location&rdquo;</li>
<li> Choose the correct toolchain for your platform (i.e. MacOSX GCC on Mac) and click &ldquo;Finish&rdquo;</li>
</ol>


<p>At this point, the indexer starts running and already produces a pretty decent index of much of SpiderMonkey. Still, there are a quite a few things that CDT doesn&rsquo;t pick up yet: For everything to be indexed, CDT has to be aware of the project&rsquo;s build details.</p>

<h2>Step 3 &ndash; Index All the Code</h2>

<p>To let CDT know about the build, it has to invoke make itself (or, as is done in the guide for the whole Mozilla codebase on MDN, read a log of the build). This can be setup in another set of decently simple steps:</p>

<ol>
<li>Open the project&rsquo;s properties by selecting its root and clicking &ldquo;Properties&rdquo; in the &ldquo;File&rdquo; menu and select &ldquo;C/C++ Build&rdquo;</li>
<li>Under &ldquo;Builder Settings&rdquo;, deactivate &ldquo;Use default build command&rdquo;</li>
<li>Instead, change &ldquo;Build command&rdquo; to read <code>make -w</code> (this is required because CDT needs detailed information about which directories <code>make</code> operates on, which using <code>-w</code> causes <code>make</code> to provide)</li>
<li>Change the &ldquo;Build location&rdquo; to the build directory configured in step 1. For me, that means changing &ldquo;Build directory&rdquo; to read <code>${workspace_loc:/SpiderMonkey/_DBG.OBJ}</code></li>
<li>Under &ldquo;Behavior&rdquo;, make sure that &ldquo;Enable parallel build&rdquo; is <em>deactivated</em>, as CDT&rsquo;s indexer will freak out otherwise</li>
<li>Remove &ldquo;all&rdquo; from &ldquo;Build (Incremental build)&rdquo;</li>
<li>Deactivate &ldquo;Clean&rdquo; so that your builds don&rsquo;t take ages</li>
<li>If you&rsquo;re using clang, <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=378981">a bug in CDT</a> requires changing one more setting: in the project&rsquo;s &ldquo;C/C++ General &ndash;> Preprocessor Include
Paths, Macros etc.&rdquo; settings panel, select the &ldquo;Providers&rdquo; tab, then select &ldquo;CDT GCC Build Output Parser&rdquo; and change the content of the &ldquo;Compiler command pattern&rdquo; input field to read <code>(gcc)|([gc]\+\+)|(clang)</code></li>
<li>Start the build by selecting &ldquo;Build All&rdquo; from the &ldquo;Project&rdquo; menu</li>
<li>Start the indexer by selecting &ldquo;Index > Rebuild&rdquo; from the project&rsquo;s context menu</li>
</ol>


<p>And that&rsquo;s pretty much it: Large parts of SpiderMonkey should now be indexed. Unfortunately, there are also large parts that aren&rsquo;t properly indexed, leading to errors and warnings being shown for perfectly valid code, but I find that the parts that <em>do</em> work do so nicely enough to make it totally worth it.</p>

<p>That leaves us with only one thing to do:</p>

<h2>Step 4 &ndash; Speeding It Up</h2>

<p>As mentioned above, CDT doesn&rsquo;t like ccache for some reason. Until <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=378984">that bug</a> is fixed, a somewhat simple workaround is to hide the usage of ccache by wrapping it with shell scripts for <code>gcc</code>/<code>g++</code> and <code>clang</code>/<code>clang++</code>, respectively. I use clang, so I put two scripts into <code>/usr/local/bin/</code>:</p>

<h3>cclang:</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>/usr/local/bin/ccache /usr/local/bin/clang $@</span></code></pre></td></tr></table></div></figure>


<h3>cclang++:</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>/usr/local/bin/ccache /usr/local/bin/clang++ $@</span></code></pre></td></tr></table></div></figure>


<p>After a quick <code>chmod u+x /usr/local/bin/cclang*</code>, use the following configure command to start working with ccache after all:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CC='cclang -Qunused-arguments -fcolor-diagnostics' CXX='cclang++ -Qunused-arguments -fcolor-diagnostics' ../configure --enable-debug --disable-optimize --enable-debug-symbols</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Beginnings]]></title>
    <link href="http://tschneidereit.github.io/2011/12/13/on-beginnings/"/>
    <updated>2011-12-13T15:06:00+01:00</updated>
    <id>http://tschneidereit.github.io/2011/12/13/on-beginnings</id>
    <content type="html"><![CDATA[<p>On December 31, 1995, Calvin and Hobbes <a href="http://www.gocomics.com/calvinandhobbes/1995/12/31">boarded their sled and took off</a> into the blank canvas that to them was the stark white, freshly snow-covered scenery.</p>

<p>That&rsquo;s not what this post is about. At least in part, it is, however, about endings. Just as that last comic strip Bill Watterson ever published.</p>

<p>In the fall of 1999, I discovered this fantastic little tool called Macromedia Flash 4. To cut a long and boring story short, the result was that instead of going to university, I immediately kicked off my career as a professional web developer in the advertising industry. While in hindsight, that claim of professionalism was bordering on the ridiculous in its utter optimism and naïveté, the good news is: it somehow worked and while I did start university a year later, it had to take a back seat to my main occupation.</p>

<p>Now, twelve years on, it seems like not that much has changed. Granted: I spent the last five years not only developing but also managing teams and doing conceptual work. Still, at the core of things, I am what I was all those years ago &ndash; a web developer.</p>

<p>As you might have guessed, though, the real changes are a bit more subtle. As time went on, I became more and more aware of two important facts: first, neither my talents nor my interests really lie in the frontend; second, twelve years of doing advertising is enough for a lifetime.</p>

<p>Don&rsquo;t get me wrong: I don&rsquo;t have any deeply-rooted problem with advertising in and of itself. I do, however, think that there&rsquo;s a fundamental problem with projects in the advertising industry: they lack real stakeholders. Now I might be completely off the mark here, but that was my overarching impression in almost all the projects I was ever involved in and it makes a lot of sense to me, too: the companies you work for in advertising have their stakes in their products, not really in marketing them.</p>

<p>Whether I&rsquo;m right about this doesn&rsquo;t really matter, though: real or imagined, this gap I experience is enough of a problem for me that I want to change what I&rsquo;m working on.</p>

<p>The other part of the equation is that I enjoy building systems, applications and frameworks, not microsites. The projects I enjoy the most are along the lines of <a href="http://robotlegs.org">Robotlegs</a>, <a href="http://github.com/tschneidereit/SwiftSuspenders">Swiftsuspenders</a> and <a href="http://github.com/reprise/reprise-framework">Reprise</a> &ndash; an MVC framework, an IoC container and a CSS-based layout and components framework. Building a CMS abstraction layer to be used by the hundreds of agencies building modules and microsites for the <a href="http://www.nivea.com/">NIVEA website</a> was pretty neat, too.</p>

<p>For these reasons, I have decided to close my current business as the tech lead of a small team of sub-contractors to advertising agencies at year&rsquo;s end.</p>

<p>As of January 2012, I will do some exploring of a blank canvas of my own and be available for bookings as a freelancing developer specialized in building systems, renderers and complex applications. I&rsquo;m perfectly capable of doing and will do the occasional frontend programming if an otherwise perfect job requires it, but as said above, I strongly believe that my real talents lie a bit deeper down the stack. If that sounds like something your company could use and you&rsquo;re either located in Germany or could include me working remotely then please do get in touch!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flash >= CS5 and version control: Of binary data and wasted bandwidth]]></title>
    <link href="http://tschneidereit.github.io/2011/10/23/flash-cs5-and-version-control-of-binary-data-and-wasted-bandwidth/"/>
    <updated>2011-10-23T17:05:27+02:00</updated>
    <id>http://tschneidereit.github.io/2011/10/23/flash-cs5-and-version-control-of-binary-data-and-wasted-bandwidth</id>
    <content type="html"><![CDATA[<p>With the advent of Flash CS5, Adobe switched the format of <code>.fla</code>
files from the quirky binary format it was in previous editions to what every
self-respecting developer of document-creation tools uses nowadays: A
compressed archive consisting of an XML file (the actual document) and lots of
additional files.</p>

<p>This in itself would be pretty nice, what with enabling third-party tooling
and all. What I want to get at, though, is that they were nice enough to also
enable working with those same documents saved as an uncompressed folder:
Choosing <code>Flash CS5 Uncompressed Document (*.XFL)</code> as the file format
when saving a project causes a folder with the project&rsquo;s name to be created.
Inside this folder is everything that would normally be contained in the
<code>.fla</code>:</p>

<ul>
<li>The file <code>DOMDocument.xml</code>, which is the equivalent of the .fla file without any embedded assets or settings</li>
<li>The file <code>PublishSettings.xml</code>, which contains exactly what you think it does</li>
<li>The file <code>MobileSettings.xml</code>, which also contains exactly what you think it does</li>
<li>The file <code>META-INF/metadata.xml</code>, containing the documents&rsquo;s creation and change history</li>
<li>The folder <code>LIBRARY</code>, which contains the documents library, neatly structured in the same way as your library itself, but with additional folders for binary assets, such as BMPs</li>
<li>The folder <code>bin</code>, which contains cached versions of the binary assets, pre-converted to their output representations as compiled into the published SWF</li>
</ul>


<p>The beauty of this setup is that you can work with all these different files
just as you would with any other text or binary files: You can edit the XML
files in your editor of choice, replace images with newer versions you get
from your designer or use your diff and merge tools on them.</p>

<p>This last part is the most important to me: By replacing your <code>.fla</code>
files with <code>XFL</code> folders, you allow them to be version controlled in
a sane way. Instead of forcing your VCS to deal with incomprehensible blobs of
binary data, hoping that it will make the best of it, you allow it to live up
to all the hype about its efficiency and speed that caused you to use it in
the first place.</p>

<p>One last tip on that: Use whatever means your VCS provides to exclude the
<code>*.dat</code> files in the <code>bin</code> folder from versioning. They&rsquo;re
really simple caches that get re-created if missing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mario Mushroom: Now with 80% less awesome]]></title>
    <link href="http://tschneidereit.github.io/2011/10/22/mario-mushroom-now-with-80-less-awesome/"/>
    <updated>2011-10-22T14:34:04+02:00</updated>
    <id>http://tschneidereit.github.io/2011/10/22/mario-mushroom-now-with-80-less-awesome</id>
    <content type="html"><![CDATA[<p><strong>tl;dr:</strong>
Don&rsquo;t use the Mario Mushroom Operator if you don&rsquo;t want your setter to be
invoked more than once.</p>

<p><strong>Update:</strong> I totally forgot to mention that I found out about this problem with <a href="https://twitter.com/darscan">@darscan</a> while working on <a href="http://github.com/tschneidereit/SwiftSuspenders/">Swiftsuspenders</a> and <a href="http://github.com/robotlegs/robotlegs-framework/">Robotlegs</a> code.</p>

<p><strong>The Details</strong>
I think it was <a href="twitter.com/#!/robpenner/">@robpenner</a> who coined the term
&ldquo;Mario Mushroom Operator&rdquo;.</p>

<p>In case you&rsquo;re wondering, the Mario Mushroom Operator is this: <code>||=</code>.</p>

<p>A good translation for how the MMO™ works seems to be this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">field</span><span class="o">)</span> <span class="o">{</span> <span class="n">field</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In case you&rsquo;re still wondering, here&rsquo;s how you&rsquo;d use it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="kd">function </span><span class="nf">useRuntimeDefault</span><span class="o">(</span><span class="n">input</span><span class="o">:</span><span class="kt">Object</span><span class="o">):</span><span class="kt">void</span> <span class="o">{</span> <span class="n">input</span>
</span><span class='line'><span class="o">||=</span> <span class="n">getDefaultValue</span><span class="o">();</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I.e., the most important use-case for the MMO™ is to apply runtime-determined
default values for method arguments.</p>

<p>Now, that&rsquo;s really useful and you might be wondering what could possibly go
wrong with that.</p>

<p>Consider this snipped of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="kd">private</span> <span class="kd">var</span> <span class="n">_setOnce</span> <span class="p">:</span> <span class="kt">Boolean</span><span class="o">;</span> <span class="kd">private</span> <span class="kd">var</span> <span class="n">_value</span> <span class="p">:</span>
</span><span class='line'><span class="kt">Object</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">function</span> <span class="kd">set</span> <span class="n">value</span><span class="o">(</span><span class="n">value</span> <span class="o">:</span> <span class="n">Object</span><span class="o">)</span> <span class="o">:</span> <span class="kc">void</span> <span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="n">_setOnce</span><span class="o">)</span> <span class="o">{</span> <span class="k">throw</span> <span class="k">new</span>
</span><span class='line'><span class="kt">Error</span><span class="o">(</span><span class="s1">&#39;Value can only be set once&#39;</span><span class="o">);</span> <span class="o">}</span> <span class="n">_setOnce</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> <span class="n">_value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">function</span> <span class="kd">get</span> <span class="n">value</span><span class="o">()</span> <span class="o">:</span> <span class="n">Object</span> <span class="o">{</span> <span class="k">return</span> <span class="n">_value</span><span class="o">;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Used in a class, this code encapsulates a value that can be set exactly once,
after which it can only be read.</p>

<p>With me still? Splendid.</p>

<p>In fact, you&rsquo;re probably already guessing what comes now: Using the MMO™ to
assign this once-settable value iff it hasn&rsquo;t already been set:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">value</span> <span class="o">||=</span> <span class="o">{};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here, finally, things go awry. As it turns out, the MMO™&rsquo;s translation
given earlier isn&rsquo;t quite correct. Instead, the compiler (or the VM, I haven&rsquo;t
checked the bytecode) seems to translate our usage of the MMO™ to something
along the following lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">field</span> <span class="o">=</span> <span class="n">field</span> <span class="o">?</span> <span class="n">field</span> <span class="o">:</span> <span class="o">{};</span>
</span></code></pre></td></tr></table></div></figure>


<p>In summary, instead of guarding the assignment to a field as an if statement
would do, the MMO™ only chooses between two values to use in the assignment
like the ternary operator does.</p>

<p>In case you&rsquo;re now thinking that that doesn&rsquo;t affect you because you, just as
every sane person you know, don&rsquo;t ever have use-cases for one-time assignable
fields, ask yourself whether you can be certain that all your setters are
side-effect free if you re-assign the same value and that you never, ever,
care about the overhead associated with double-setting values needlessly.
&ldquo;Yes&rdquo; and &ldquo;yes&rdquo;? Cool. &ldquo;Mmh&rdquo; and &ldquo;not sure&rdquo;: Weep with me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftSuspenders 1.6: A Tale of Small Changes and Big Plans]]></title>
    <link href="http://tschneidereit.github.io/2011/02/05/swiftsuspenders-1-6-a-tale-of-small-changes-and-big-plans/"/>
    <updated>2011-02-05T16:15:28+01:00</updated>
    <id>http://tschneidereit.github.io/2011/02/05/swiftsuspenders-1-6-a-tale-of-small-changes-and-big-plans</id>
    <content type="html"><![CDATA[<p>I just released version 1.6 of my not-so-small-anymore IoC container
<a href="https://github.com/tschneidereit/SwiftSuspenders">SwiftSuspenders</a>. This
release marks the end of the line for 1.x-releases, all future development
work will go towards the all-new, shiny 2.0 release. Bug fixing will continue
as per usual, of course.</p>

<h3>Small Changes?</h3>

<p>Yes &ndash; in 1.6:</p>

<ul>
<li><p>An easy but nevertheless significant performance optimizations for child injectors: Through a slight refactoring of the InjectionPoint class, I was able to make it fully independent from the injector that creates them, enabling them to be shared among all injectors in the VM instance. This allows them to be cached once, removing the significant performance overhead associated in inspecting classes to find injection points for all but the first injector.</p></li>
<li><p>Some usability improvements such as better error, warning and info messages on trying to instantiate interfaces, re-mapping previously mapped types and construction of dummy instances to work around Flash Player bugs.</p></li>
</ul>


<h3>Right, but Big Plans?</h3>

<p>Indeed &ndash; for 2.0!</p>

<p>For the next major release, I plan to change things up quite a bit. The main
features on the roadmap are:</p>

<ul>
<li>a much nicer API</li>
<li>factory mappings</li>
<li>field mappings</li>
<li>live injections</li>
<li>optional injections</li>
<li>weak mappings in child injectors</li>
<li>full live-cycle management with [PreDestroy] annotations</li>
<li>a new format for external, runtime-loadable definition of both injection points and type mappings</li>
<li>full implementation of the <a href="https://github.com/darscan/AS3-DI-Metadata">metadata standardization</a> <a href="http://twitter.com/darscan">@darscan</a> started, for example:</li>
<li>optionally shortening <code>[Inject(name='name')]</code> to <code>[Inject('name')]</code></li>
</ul>


<h3>That sounds just swell, but I&rsquo;d really like some details, please!</h3>

<p>Of course you do!</p>

<h4>The shiny new API</h4>

<p>SwiftSuspenders&#8217; API mainly consists of methods that facilitate the mapping of
types (and, optionally, names) to responses. Internally, this already is a
two-step process: First, an object is created that contains the request
configuration (i.e., the type and the optional name) and second, this request
is assigned a response of a certain type: A value, class, singleton or rule
mapping.</p>

<p>While 2.0 will ship with a façade to make porting from 1.x easy, the real
interface will expose this process as the two steps it really is. Look forward
to seeing mapping commands that look (approximately) like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">injector</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">YourClass</span><span class="o">);</span> <span class="c1">//current equivalent: injector.mapClass(YourClass, YourClass);</span>
</span><span class='line'><span class="n">injector</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">YourClass</span><span class="o">,</span> <span class="s1">&#39;name&#39;</span><span class="o">);</span> <span class="c1">//current equivalent: injector.mapClass(YourClass, YourClass, &#39;name&#39;);</span>
</span><span class='line'><span class="n">injector</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">YourClass</span><span class="o">).</span><span class="n">to</span><span class="o">(</span><span class="n">YourClass</span><span class="o">);</span> <span class="c1">//equivalent to the first mapping (i.e.: optional)</span>
</span><span class='line'><span class="n">injector</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">YourClass</span><span class="o">,</span> <span class="s1">&#39;name&#39;</span><span class="o">).</span><span class="n">to</span><span class="o">(</span><span class="n">YourClass</span><span class="o">);</span> <span class="c1">//equivalent to the second mapping (i.e.: optional)</span>
</span><span class='line'><span class="n">injector</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">YourInterface</span><span class="o">).</span><span class="n">toType</span><span class="o">(</span><span class="n">YourClass</span><span class="o">);</span> <span class="c1">//current equivalent: injector.mapClass(YourInterface, YourClass);</span>
</span><span class='line'><span class="n">injector</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">YourClass</span><span class="o">).</span><span class="n">asSingleton</span><span class="o">();</span> <span class="c1">//current equivalent: injector.mapSingleton(YourClass);</span>
</span><span class='line'><span class="n">injector</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">YourInterface</span><span class="o">).</span><span class="n">toType</span><span class="o">(</span><span class="n">YourClass</span><span class="o">).</span><span class="n">asSingleton</span><span class="o">();</span> <span class="c1">//current equivalent: injector.mapSingletonOf(YourInterface, YourClass);</span>
</span><span class='line'><span class="n">injector</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">YourInterface</span><span class="o">).</span><span class="n">toValue</span><span class="o">(</span><span class="n">value</span><span class="o">);</span> <span class="c1">//current equivalent: injector.mapValue(YourInterface, value);</span>
</span><span class='line'><span class="n">injector</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">YourInterface</span><span class="o">).</span><span class="n">toRule</span><span class="o">(</span><span class="n">otherRule</span><span class="o">);</span> <span class="c1">//current equivalent: injector.mapRule(YourInterface, otherRule);</span>
</span><span class='line'><span class="kd">var</span> <span class="n">request</span> <span class="p">:</span> <span class="kt">InjectionRequest</span> <span class="o">=</span> <span class="n">injector</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">YourClass</span><span class="o">);</span> <span class="c1">//current equivalent: var request : InjectionConfig = injector.getMapping(YourClass);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Basically, the API will be somewhat more DSL-ish, without going all the way
into that direction, though: I like to think of it as bundling up all
parameters related to one concept in one method call: First everything related
to <em>what</em> gets mapped, then, optionally, <em>to what</em> it gets mapped and finally,
<em>how</em> its being mapped.</p>

<p>Additionally, the small rest of the API will be subject to some tweaks, I
suppose.</p>

<h4>Factory mappings</h4>

<p>I haven&rsquo;t really gotten through the concept phase for these. The absolute
minimum is support for <code>injector.map().toFactory()</code> and
<code>injector.map().toFactoryMethod()</code>, but if I come up with some clever
mechanism for parameterizing specific injections, I would like to support that
as well.</p>

<h4>Field mappings</h4>

<p>In order to turn SwiftSuspenders into a light-weight one-way binding solution,
2.0 will support mapping of fields in objects with
<code>injector.map().toField(fieldName, inObject)</code>. If the mapped field is
bindable, SwiftSuspenders will listen to its change events and update the
affected live injections:</p>

<h4>Live injections</h4>

<p>Now those are something I&rsquo;m really looking forward to. By specifying the
<code>live</code>-parameter in your <code>Inject</code>-metadata (as in <code>[Inject(live)]</code>), you
basically create a one-way binding that updates the value as soon as the
associated mapping changes or, in the case of field mappings, the relevant
binding event is dispatched as described above.</p>

<h4>Optional injections</h4>

<p>These are exactly what you think they are. <code>[Inject(optional)]</code> will instruct
the injector not to throw an exception if it can&rsquo;t find a mapping for the
requested type.</p>

<h4>Weak mappings</h4>

<p>Imagine you have a module that you want to test &ndash; or perhaps even deploy &ndash;
standalone but <em>also</em> want to load into a bigger application. Now this module
might have some configuration that&rsquo;s different based on what context it gets
loaded into. If its loaded into another application, all or parts of the
configuration should be supplied by that application, but if its running
standalone, it has to deal with configuration all by itself. Enter weak
mappings: These instruct the injector to always ask its parent injector if it
has a mapping for the injection request. Only if that returns empty, the
weakly mapped value, in this case the module&rsquo;s configuration, is used.</p>

<h4>Tear-down with [PreDestroy]</h4>

<p>Just as <code>[Inject]</code> is used to build object graphs, <code>[PreDestroy]</code> facilitates
tearing them down. When instructed to destroy a certain instance that it
created itself or that was injected into with <code>injector.injectInto</code>,
SwiftSuspenders will first go through all injection points in the instance and
destroy those recursively (if they are only used by this instance, not if they
are singleton or value mappings, of course) and the invoke all methods marked
with <code>[PreDestroy]</code> metadata.</p>

<p>This will probably be used to replace the currently hard-coded <code>preRemove</code> and
<code>onRemove</code> methods in Robotlegs mediators.</p>

<h4>New runtime-loadable configuration format for injection points and mappings</h4>

<p>The current XML-based configuration format was solely meant to work around
restrictions in the Flash CS* AS3 compiler which doesn&rsquo;t support custom
metadata out of the box. This problem has since been <a href="http://www.patrickmowrer.com/2010/03/03/compiling-custom-as3-metadata-flash-professional">worked around</a>, rendering the format obsolete as it is right now. As
quite some people expressed interest in being able to mix hard-coded and
runtime-loaded configuration, I will try to come up with a good format for
that. For now, I don&rsquo;t have anything in that direction, so we&rsquo;ll see how that
goes. And if <em>you</em> want to define just such a format: Please do (and tell me
about it).</p>

<h4>Standardization FTW</h4>

<p>One thing I like about Robotlegs is how @darscan went to great lengths to
prevent as much lock-in as possible: Not only is the <a href="https://github.com/robotlegs/robotlegs-framework/blob/master/src/org/robotlegs/core/">framework&rsquo;s core</a>
just a set of interfaces that
makes it easy to roll your own for each part, the framework specifically tries
to make as many parts of your application independent and even ignorant of its
existence as possible. Toward that end, Shaun started a <a href="https://github.com/darscan/AS3-DI-Metadata">metadata standardization effort</a> with the
goal of getting as much agreement on the format of injection point-
configuration metadata as possible between the various IoC containers out
there.</p>

<p>And while I like to think of SwiftSuspenders (especially in its future
2.0-form) as being a pretty decent IoC container implementation, you should
definitely check out <a href="http://github.com/sophistifunk/SmartyPants-IOC">SmartyPants</a>, <a href="http://swizframework.org/">Swiz</a>, <a href="https://github.com/sammyt/dawn">Dawn</a>,
<a href="http://www.spicefactory.org/parsley/index.php">Spicelib</a> and other IoC
containers if only out of interest. I&rsquo;d also like for you to tell me of you
don&rsquo;t like SwiftSuspenders or you think it&rsquo;s missing some Very Important
Feature, though. Anyway, to allow you to switch from or to SwiftSuspenders as
painlessly as possible, I&rsquo;ll implement as much of whatever everyone decides
upon as possible in 2.0 and future releases.</p>

<h3>That&rsquo;s quite a lot of work you just described. You really think you can handle all of it for 2.0?</h3>

<p>Yeah, I know: This sounds like (and is) a lot. I&rsquo;ll pack all of this up in the
form of a roadmap on the github wiki, prioritizing stuff and distributing it
across beta releases. Depending on when it makes sense to do a new major
release (which in turn depends on when we decide to release Robotlegs 2.0), I
<em>might</em> let one or two of the described features slip into 2.*.</p>

<p><strong>But</strong>, some of these features already exist in forks other people published on github and which I was very bad at keeping up with. It is my hope that I can integrate much of these other great people&rsquo;s hard work instead of doing much myself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dictionaries in AS3: A tale of awesomeness and restrictions]]></title>
    <link href="http://tschneidereit.github.io/2011/01/14/dictionaries-in-as3-a-tale-of-awesomeness-and-restrictions/"/>
    <updated>2011-01-14T12:38:13+01:00</updated>
    <id>http://tschneidereit.github.io/2011/01/14/dictionaries-in-as3-a-tale-of-awesomeness-and-restrictions</id>
    <content type="html"><![CDATA[<p><strong>Update:</strong> <a href="http://twitter.com/stray_and_ruby">@stray_and_ruby</a> kindly made me aware of the fact that it isn&rsquo;t entirely obvious what this post is about. I&rsquo;m talking about a fairly obscure, but really handy usage of the <a href="http://www.adobe.com/livedocs/flash/9.0/ActionScriptLangRefV3/flash/utils/Dictionary.html">Dictionary class</a>: Implementing weak references to objects.<br/>
<a href="https://twitter.com/sunjammer">@sunjammer</a> recently <a href="http://www.doomsday.no/esn/2011/01/using-the-as3-dictionary-utility/">posted about the Dictionary class in AS3</a>. I agree with him: Dictionaries are awesome.</p>

<p>Unfortunately, they&rsquo;re only nearly as great as he describes them because of
one little snag: Weak Dictionaries are only &ldquo;weakly keyed&rdquo;, not &ldquo;weakly
valued&rdquo;, meaning that assigning an object as a value creates a strong
reference to that object &ndash; even if that very same object is also used as the
key for the entry.</p>

<p>That&rsquo;s especially unfortunate because it doesn&rsquo;t allow for efficiently
implementing weak references with low overhead:</p>

<p>Instead of using something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="kd">package</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">flash.utils.Dictionary</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">class</span> <span class="n">WeakReference</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">const</span> <span class="n">_referencesHolder</span> <span class="p">:</span> <span class="kt">Dictionary</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Dictionary</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">var</span> <span class="n">_nextReferenceID</span> <span class="p">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">const</span> <span class="n">_referenceID</span> <span class="p">:</span> <span class="kt">int</span> <span class="o">=</span> <span class="n">_nextReferenceID</span><span class="o">++;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function </span><span class="nf">WeakReference</span><span class="o">(</span><span class="n">target</span> <span class="o">:</span> <span class="kt">*</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="n">_referencesHolder</span><span class="o">[</span><span class="n">_referenceID</span><span class="o">]</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="kd">get</span> <span class="n">target</span><span class="o">()</span> <span class="o">:</span> <span class="o">*</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">_referencesHolder</span><span class="o">[</span><span class="n">_referenceID</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>you have to use something with much more overhead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="kd">package</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">flash.utils.Dictionary</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">class</span> <span class="n">WeakReference</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">const</span> <span class="n">_referenceHolder</span> <span class="p">:</span> <span class="kt">Dictionary</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Dictionary</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function </span><span class="nf">WeakReference</span><span class="o">(</span><span class="n">target</span> <span class="o">:</span> <span class="kt">*</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="n">_referenceHolder</span><span class="o">[</span><span class="n">target</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">//every basic type works as the value</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="kd">get</span> <span class="n">target</span><span class="o">()</span> <span class="o">:</span> <span class="o">*</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">var</span> <span class="n">value</span> <span class="o">:</span> <span class="o">*</span> <span class="k">in</span> <span class="n">_referenceHolder</span><span class="o">)</span> <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On another note, I naturally had to <a href="http://www.google.com/search?q=awesomeness">google &ldquo;awesomeness&rdquo;</a> and what do you
think ensued? Correct: Awesomeness! Specifically, the result contained,
besides lots of links to Barney Stinson and HIMYM in general, <a href="http://www.awesomenessreminders.com/">this fantastic service</a>. I mean seriously: Who doesn&rsquo;t
like to be reminded of being awesome? And if you ask me, $45 a month is dirt
cheap for that happening reliably and on a daily basis. <em>(Just as the
providers of the service, I&rsquo;m only half-joking, btw. I&rsquo;m sure there are lots
of people out there whose life can be improved by such a service.)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftSuspenders 1.5, or: A tale of robots and refactorings]]></title>
    <link href="http://tschneidereit.github.io/2010/05/15/swiftsuspenders-1-5-or-a-tale-of-robots-and-refactorings/"/>
    <updated>2010-05-15T17:41:01+02:00</updated>
    <id>http://tschneidereit.github.io/2010/05/15/swiftsuspenders-1-5-or-a-tale-of-robots-and-refactorings</id>
    <content type="html"><![CDATA[<p>Nearly half a year ago, I released
<a href="http://github.com/tschneidereit/SwiftSuspenders/">SwiftSuspenders</a> 1.0.</p>

<p>As hinted at in the <a href="http://www.tillschneidereit.de/2009/11/24/announcing-swiftsuspenders-1-0/">related blog post</a>,
this new release contains a solution to the &ldquo;Robot Legs Problem&rdquo;: and it goes by the name of <em>Child Injectors</em>.</p>

<p>So, why would robot legs pose a problem for a dependency injection container,
you ask. In short: They don&rsquo;t &ndash; their creation does. See, DI containers are
all about creating object graphs. That is: They allow you to create complex,
nested trees of objects in an automated fashion.</p>

<p>Want to build a car? You can either go about it manually from the outside in:
You create the car&rsquo;s shell, then you realize that your car probably needs an
engine. You put that in, at which point you realize that your engine will need
need cylinders, so you add some of those, and so on.</p>

<p>Or, you can use a DI container and do everything the other way around: You
first create a collection of all the parts your car will consist of, and then
you tell the DI container to instantiate the outermost part &ndash; the shell. The
container inspects the shell and sees that it needs some parts, like an
engine. It then looks through the set of parts you supplied, and adds those
that fit the dependencies of the shell. In doing so, each of the parts is
itself inspected and all its dependencies are fulfilled, recursively.</p>

<p>Now, imagine you want to build a robot. Robots aren&rsquo;t really special in any
way that&rsquo;s interesting for DI containers at all. It&rsquo;s just that their
construction is commonly used to explain a problem that you&rsquo;ll sooner or later
encounter if you use DI containers to create complex objects.</p>

<h4>What is the Robot Legs Problem?</h4>

<p>The robot legs problem describes the difficulties that one experiences when
trying to construct structures with two or more sub-trees that are very
similar, but not identical to one another.</p>

<p>See, that robot, it&rsquo;s supposed to look like a human being in many ways: It&rsquo;ll
have a head, a torso, two arms and two legs. But there&rsquo;s an important
difference to a human: The robot is much, much simpler. For example, parts of
this robot&rsquo;s legs are identical for both sides. Now ideally, if you&rsquo;ve got two
knee joints that are entirely identical to one another, you only want to
define them once. The problem is that for our robot, there are parts further
down the legs that differ for each side. say the knee joints are identical,
but the ankles are slightly different for each leg. How is the DI container
supposed to know that it has to supply different parts somewhere down the leg
if some intermediary parts are identical? It can&rsquo;t. Well, not without some
help, at least.</p>

<p><strong><em>That&rsquo;s the Robot Legs Problem.</em></strong></p>

<p>There are (at least) two solutions to this problem: Either you add some
differentiating attribute to the knee joints and all other parts that are
really the same, functionally; or you somehow add information to the DI
container&rsquo;s configuration that lets it figure out the differences from the
outside.</p>

<p>The first option isn&rsquo;t really attractive, but it&rsquo;s the easiest from a
conceptual point of view: Instead of having one class <code>Knee</code>, you create two classes, <code>LeftKnee</code> and <code>RightKnee</code>, both extending <code>Knee</code>. The only thing that differs for these classes
is that they define dependencies for <code>LeftAnkle</code>
and <code>RightAnkle</code> respectively (I&rsquo;m leaving out
any intermediary parts such as bones here for reasons of simplicity. For your
own, real-world, robot, you&rsquo;d probably want to have some of those). Apart from
adding a lot of boiler-plate code (imagine this with your real-world robot
that has about 53 parts in each leg that are functionally entirely identical
for both sides!), this creates serious problems in terms of separation of
concerns and encapsulation: If the knees truly are functionally identical,
it&rsquo;s none of their business to know anything about which leg they are added
to.</p>

<h4>What kind of solution does <a href="http://github.com/tschneidereit/SwiftSuspenders/">SwiftSuspenders</a> provide?</h4>

<p>Obviously, we want to use the second solution &ndash; and with
<a href="http://github.com/tschneidereit/SwiftSuspenders/">SwiftSuspenders</a> 1.5, we
finally can. The solution comes in the form of child injectors.</p>

<p>Child injectors are simple things: They try to satisfy all dependencies
themselves, but if they can&rsquo;t find a mapping for one, they turn to their
parent and ask if it has a corresponding mapping. Really, they&rsquo;re kinda dumb.</p>

<p>But here&rsquo;s the thing:
<a href="http://github.com/tschneidereit/SwiftSuspenders/">SwiftSuspenders</a> lets you
create trees of dependency mappings that use different child injectors to
satisfy recursive dependencies. In our example, you&rsquo;d create rules for the
<code>LeftHip</code> and the <code>RightHip</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="kd">var</span> <span class="n">injector</span> <span class="p">:</span>
</span><span class='line'><span class="kt">Injector</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Injector</span><span class="o">();</span>
</span><span class='line'><span class="kd">var</span> <span class="n">leftHipRule</span> <span class="p">:</span> <span class="kt">InjectionConfig</span> <span class="o">=</span> <span class="n">injector</span><span class="o">.</span><span class="na">mapClass</span><span class="o">(</span><span class="n">LeftHip</span><span class="o">,</span> <span class="n">LeftHip</span><span class="o">);</span>
</span><span class='line'><span class="kd">var</span> <span class="n">rightHipRule</span> <span class="p">:</span> <span class="kt">InjectionConfig</span> <span class="o">=</span> <span class="n">injector</span><span class="o">.</span><span class="na">mapClass</span><span class="o">(</span><span class="n">RightHip</span><span class="o">,</span> <span class="n">RightHip</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now in order to differentiate further down the leg, we create parallel structures for both legs in separate
injectors. But first, we need to create and set these injectors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="c1">//let your main injector create a child injector:</span>
</span><span class='line'><span class="kd">var</span> <span class="n">leftLegInjector</span> <span class="p">:</span> <span class="kt">Injector</span> <span class="o">=</span> <span class="n">injector</span><span class="o">.</span><span class="na">createChildInjector</span><span class="o">();</span>
</span><span class='line'><span class="c1">//you can also create a new injector and set its parent:</span>
</span><span class='line'><span class="kd">var</span> <span class="n">rightLegInjector</span> <span class="p">:</span> <span class="kt">Injector</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Injector</span><span class="o">();</span>
</span><span class='line'><span class="n">rightLegInjector</span><span class="o">.</span><span class="na">setParentInjector</span><span class="o">(</span><span class="n">injector</span><span class="o">);</span>
</span><span class='line'><span class="c1">//Let SwiftSuspenders use the child injectors from the hip on down the leg:</span>
</span><span class='line'><span class="n">leftHipRule</span><span class="o">.</span><span class="na">setInjector</span><span class="o">(</span><span class="n">leftLegInjector</span><span class="o">);</span>
</span><span class='line'><span class="n">rightHipRule</span><span class="o">.</span><span class="na">setInjector</span><span class="o">(</span><span class="n">rightLegInjector</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this, our injectors are all set up as we need them &ndash; on to the remaining injection mappings.</p>

<p>Both <code>LeftHip</code> and <code>RightHip</code> have a dependency (and I&rsquo;m leaving out the thigh here)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="o">[</span><span class="n">Inject</span><span class="o">]</span> <span class="kd">public</span> <span class="kd">var</span> <span class="n">knee</span> <span class="p">:</span> <span class="kt">Knee</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As this dependency is the same in both legs, we can safely add it to the main injector:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">injector</span><span class="o">.</span><span class="na">mapClass</span><span class="o">(</span><span class="n">Knee</span><span class="o">,</span> <span class="n">Knee</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Upon not finding a rule for the <code>Knee</code> dependency,
the child injectors will turn to their parent and get the rule we just
defined. After using that to inject the <code>Knee</code>,
they will continue on down the tree of dependencies. The <code>Knee</code> has a dependency for an <code>Ankle</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="o">[</span><span class="n">Inject</span><span class="o">]</span> <span class="kd">public</span>
</span><span class='line'><span class="kd">var</span> <span class="n">ankle</span> <span class="p">:</span> <span class="kt">Ankle</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not that the <code>Knee</code>
would care, but this field is actually supposed to contain a different value,
depending on which leg the <code>Knee</code> is added to!
Because of that, we have to add different mappings to the child injectors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">leftLegInjector</span><span class="o">.</span><span class="na">mapClass</span><span class="o">(</span><span class="n">Ankle</span><span class="o">,</span> <span class="n">LeftAnkle</span><span class="o">);</span>
</span><span class='line'><span class="n">rightLegInjector</span><span class="o">.</span><span class="na">mapClass</span><span class="o">(</span><span class="n">Ankle</span><span class="o">,</span> <span class="n">RightAnkle</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And with that, we&rsquo;re done with the configuration! Assembling our robot is now a simple matter of letting
our injector instantiate the class <code>Robot</code>,
which of course defines dependencies for <code>LeftHip</code> and <code>RightHip</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="kd">var</span> <span class="n">myRobot</span> <span class="p">:</span> <span class="kt">Robot</span> <span class="o">=</span> <span class="n">injector</span><span class="o">.</span><span class="na">instantiate</span><span class="o">(</span><span class="n">Robot</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Great! And what about the refactorings?</h4>

<p>Right, the refactorings. Those have been applied to the
<a href="http://github.com/tschneidereit/SwiftSuspenders/">SwiftSuspenders</a> source
code. Lots of them, in fact. Their primary goal was to support child
injectors, but they also lead to a much cleaner separation of concerns.
Basically, there are now three basic building blocks in
<a href="http://github.com/tschneidereit/SwiftSuspenders/">SwiftSuspenders</a>, each with
their own very specific concern:</p>

<ul>
<li>The <code>Injector</code>, which acts as the facade to the entire system and keeps everything together</li>
<li>The <code>InjectionConfig</code>, which acts as the broker between injection points and injection results</li>
<li>Several kinds of <code>InjectionResult</code>s, which are held by <code>InjectionConfig</code>s and generate or keep the value that&rsquo;s injected into injection points</li>
</ul>


<p>In the future, <a href="http://www.youtube.com/watch?v=ATFxVB4JFpQ">robotic beings will rule the world</a>. Well, that, and the
aforementioned refactorings will allow for a better syntax for defining
injection mappings. Something along the lines of <code>injector.map(MyInterface, 'named').toClass(MyClass);</code>. But that&rsquo;s going to happen in the year 2000. Or version 2.0, I&rsquo;m not sure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing SwiftSuspenders 1.0]]></title>
    <link href="http://tschneidereit.github.io/2009/11/24/announcing-swiftsuspenders-1-0/"/>
    <updated>2009-11-24T21:59:03+01:00</updated>
    <id>http://tschneidereit.github.io/2009/11/24/announcing-swiftsuspenders-1-0</id>
    <content type="html"><![CDATA[<h4>The History</h4>

<p>Almost exactly two months ago, I <a href="http://tschneidereit.github.io/2009/09/21/introducing-%0Aswiftsuspenders/">announced</a> the first public version of SwiftSuspenders, my DI/ IoC
solution for AS3.</p>

<p>In that announcement I proposed that SwiftSuspenders might be finished and
probably wouldn&rsquo;t receive many changes anymore. Well, as it turns out, that
was ridiculously wrong. Starting with version 0.8.1, the
<a href="http://www.robotlegs.org/">Robotlegs</a> framework bundled SwiftSuspenders and
as of Robotlegs version 0.9.1, it&rsquo;s the only bundled DI solution, with
adapters for other solutions available in their own github projects.</p>

<h4>The Contributions</h4>

<p>Combined with a huge increase of popularity of Robotlegs, this caused a
constant influx of not only demands for features and bugfixes in
SwiftSuspenders, but also design feedback and substantial contributions from
<a href="http://shaun.boyblack.co.za/blog/">Shaun Smith</a>, <a href="http://joelhooks.com/">Joel Hooks</a> and <a href="http://www.robertpenner.com/">Robert Penner</a>.</p>

<h4>The Release</h4>

<p>Based on this feedback and in large parts thanks to these contributions, I&rsquo;m
happy to announce the release of a much improved <a href="http://github.com/tschneidereit/SwiftSuspenders/downloads">SwiftSuspenders 1.0</a>!</p>

<p>Contained in this release are many improvements over my initial beta release:</p>

<ul>
<li>setter injection</li>
<li>method and constructor injection with optional arguments</li>
<li>[PostConstruct] metadata annotations, allowing method invocation after the injection process completed</li>
<li>XML configuration of injection points, enabling developers to use SwiftSuspenders in Flash Pro, which doesn&rsquo;t support custom metadata</li>
<li>Injector#mapRule, enabling mapping multiple requests to the same response configuration</li>
<li>much improved unit tests</li>
<li>countless bugfixes</li>
<li>an even cleaner codebase</li>
</ul>


<h4>The Future</h4>

<p>As outlined in <a href="http://groups.google.com/group/robotlegs/browse_thread/thread/183e138803feaed4/fe6f792681162eaa?lnk=raot#fe6f792681162eaa">this thread</a> in
the <a href="http://groups.google.com/group/robotlegs">Robotlegs discussion group</a>,
I&rsquo;m planning to tackle the &ldquo;robot legs&rdquo; problem next (for which I can&rsquo;t seem
to find a good explanation anywhere &ndash; links are much appreciated!)</p>

<p>I hope to get that done pretty quickly, so a 1.1 release might not be too far
off.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improved reflection support in Flash Player 10.1?]]></title>
    <link href="http://tschneidereit.github.io/2009/11/22/improved-reflection-support-in-flash-player-10-1/"/>
    <updated>2009-11-22T01:23:14+01:00</updated>
    <id>http://tschneidereit.github.io/2009/11/22/improved-reflection-support-in-flash-player-10-1</id>
    <content type="html"><![CDATA[<h4>describeTypeJSON</h4>

<p>So it looks like Flash Player 10.1 <em>might</em> support a somewhat improved
reflections API containing support for:</p>

<ul>
<li>retrieving reflected information as JSON (or rather, as an AS3 object tree)</li>
<li>filtering the request to only retrieve certain types of information</li>
<li>Some more functions that are used internally to construct the result of describeType</li>
</ul>


<p>In other words, it containes improved access to the information available
through <code>describeType</code> and nothing more.</p>

<p>All of this functionality resides in the <code>avmplus</code> package in the
playerglobal.swc that can be <a href="http://labs.adobe.com/downloads/flashplayer10.html">downloaded from labs.adobe.com</a>.</p>

<p>This package contains a few methods and an assortment of constants:</p>

<p><img src="http://tschneidereit.github.io/images/posts/2009/11/reflection-in-fp-10_1.png" alt="reflection in fp 10.1" /></p>

<p>The most (or only, really) interesting of these is
<code>DescribeType.describeTypeJSON</code>. Using this method, it&rsquo;s possible to retrieve
reflection data as an object and to filter certain types of information using
the constants seen in the image above as bit flags. For example, to get only
information about the reflected classes constructor, you use the following
code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">DescribeType</span><span class="o">.</span><span class="na">describeTypeJSON</span><span class="o">(</span><span class="n">TargetClass</span><span class="o">,</span>
</span><span class='line'>  <span class="n">avmplus</span><span class="o">.</span><span class="na">INCLUDE_CONSTRUCTOR</span> <span class="o">|</span>
</span><span class='line'>  <span class="n">avmplus</span><span class="o">.</span><span class="na">INCLUDE_TRAITS</span> <span class="o">|</span> <span class="n">avmplus</span><span class="o">.</span><span class="na">USE_ITRAITS</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the different flags, it&rsquo;s possible to request an object containing
exactly the information needed for a certain use-case. For example, in
<a href="http://github.com/tschneidereit/SwiftSuspenders">SwiftSuspenders</a>, I&rsquo;d use
the following code to get information about a types&#8217; methods, getters/setters,
variables and constructor, all with associated metadata:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">DescribeType</span><span class="o">.</span><span class="na">describeTypeJSON</span><span class="o">(</span><span class="n">TargetClass</span><span class="o">,</span>
</span><span class='line'>  <span class="n">avmplus</span><span class="o">.</span><span class="na">INCLUDE_CONSTRUCTOR</span> <span class="o">|</span>
</span><span class='line'>  <span class="n">avmplus</span><span class="o">.</span><span class="na">INCLUDE_METHODS</span> <span class="o">|</span>
</span><span class='line'>  <span class="n">avmplus</span><span class="o">.</span><span class="na">INCLUDE_VARIABLES</span> <span class="o">|</span>
</span><span class='line'>  <span class="n">avmplus</span><span class="o">.</span><span class="na">INCLUDE_ACCESSORS</span> <span class="o">|</span>
</span><span class='line'>  <span class="n">avmplus</span><span class="o">.</span><span class="na">INCLUDE_METADATA</span> <span class="o">|</span>
</span><span class='line'>  <span class="n">avmplus</span><span class="o">.</span><span class="na">HIDE_OBJECT</span> <span class="o">|</span>
</span><span class='line'>  <span class="n">avmplus</span><span class="o">.</span><span class="na">INCLUDE_TRAITS</span> <span class="o">|</span> <span class="n">avmplus</span><span class="o">.</span><span class="na">USE_ITRAITS</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last two flags have to be present to get any meaningful information at
all. I honestly have no idea why it&rsquo;d be necessary to explicitly state that,
yes, I want to include traits &ndash; you know, the mechanism with which the virtual
machine links everything to classes and without which a class is completely
uninteresting. And don&rsquo;t get me started on what <code>avmplus.USE_ITRAITS</code> stands
for.</p>

<p>All of this can also be used with the new <code>avmplus.describeType</code>, which is
essentially identical to <code>flash.utils.describeType</code> except that it adds an
additional parameter for the configuration flags:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">describeType</span><span class="o">(</span><span class="n">target</span> <span class="o">:</span> <span class="n">Object</span><span class="o">,</span> <span class="n">flags</span> <span class="o">:</span> <span class="n">uint</span><span class="o">)</span> <span class="o">:</span> <span class="n">XML</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Detours</h4>

<p>If you think that that&rsquo;s all you need to know about how to use this new API,
think again. All of these methods and the <code>DescribeType</code> class are implemented
as internal types of the <code>avmplus</code> package and thus not accessible from
outside this package. Fortunately, this can be worked around by creating a
public wrapper in the same package:</p>

<div><script src='https://gist.github.com/240357.js'></script>
<noscript><pre><code>package avmplus
{
    public class PublicDescribeType
    {
        public static function describeTypeJSON(target : Object, flags : uint) : Object
        {
            return DescribeType.describeTypeJSON(target, flags);
        }
        
        public function publicDescribeMetadata(xml : XML, metadata : Array) : void
        {
            describeMetadata(xml, metadata);
        }
        
        public function publicDescribeParams(xml : XML, parameters : Object) : void
        {
            describeParams(xml, parameters);
        }
        
        public function publicDescribeTraits(xml : XML, traits : Object) : void
        {
            describeTraits(xml, traits);
        }
        
        public function publicFinish(xml : XML, e : XML, i : Object) : void
        {
            finish(xml, e, i);
        }
    }
}</code></pre></noscript></div>


<h4>Is it all just a mistake?</h4>

<p>There are some things that are a bit fishy about this whole affair: Why is all
this functionality internal to the <code>avmplus</code> namespace? And what&rsquo;s with the
name &ldquo;avmplus&rdquo; in the first place? Seems like a weird choice to expose the
project name of the VM in such a way. Also, the API feels quite rough and
exposes functionality that&rsquo;s seemingly useless to AS3 developers.</p>

<p>Investigating some more, I discovered how this entire API came to be: It&rsquo;s the
new implementation of the old <code>describeType</code> functionality in the new version
of the ActionScript Virtual Machine, code named Tamarin Tracing. The <a href="http://hg.mozilla.org/tamarin-redux/rev/55b332e70e12">log message of the commit which added it</a> sheds some light on this. Since this initial commit,
<a href="http://hg.mozilla.org/tamarin-redux/log?rev=describetype">a few changes</a> have
been made, resulting in <a href="http://hg.mozilla.org/tamarin-redux/file/81b0b36ee7cb/core/DescribeType.as">the current version of the API</a> as exposed in 10.1
beta.</p>

<p>Now here&rsquo;s my guess about what&rsquo;s happened: When creating the Flash Player
beta, some configuration option was set the wrong way, causing the <code>avmplus</code>
package to be visible within playerglobal.swc, when it really should be an
invisible implementation detail. At the very least, the API in this state
probably isn&rsquo;t meant for public consumption and might well be removed in the
final 10.1 version.</p>

<h4>Now what?</h4>

<p>I&rsquo;d really like for this API to stay &ndash; be it in the current state or as a
polished version located in the <code>flash.utils</code> package or wherever.
Unfortunately, I&rsquo;m not sure what to do to that end; Adding a bug to the Flash
Player issue tracker to ask that something that&rsquo;s available in the beta should
stay that way in the final release seems odd.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing SwiftSuspenders]]></title>
    <link href="http://tschneidereit.github.io/2009/09/21/introducing-swiftsuspenders/"/>
    <updated>2009-09-21T16:20:43+02:00</updated>
    <id>http://tschneidereit.github.io/2009/09/21/introducing-swiftsuspenders</id>
    <content type="html"><![CDATA[<h4>Working with RobotLegs</h4>

<p>Recently, I started working with the awesome MVCS framework
<a href="http://github.com/darscan/robotlegs/">RobotLegs</a> by <a href="http://shaun.boyblack.co.za/blog/">Shaun Smith</a>.</p>

<p>As I&rsquo;m not a big fan of the configuration overhead that the Spring framework
for <a href="http://en.wikipedia.org/wiki/Dependency_Injection">Dependency Injection</a>
brings with it, I immediately fell in love with the metadata based
<a href="http://code.google.com/p/smartypants-ioc/">SmartyPants IOC framework</a>. While
I really like the approach and everything worked great, I quickly realized
that SmartyPants has two problems: It&rsquo;s somewhat slow and, due to some
dependencies on the Flex framework, rather big.</p>

<h4>SwiftSuspenders: A fast, lightweight DI solution</h4>

<p>That&rsquo;s why I started implementing an ultra lightweight DI framework (which
hardly even deserves being called a framework) which then became
<a href="http://github.com/tschneidereit/SwiftSuspenders">SwiftSuspenders</a>.</p>

<p>SwiftSuspenders implements exactly the functionality needed by RobotLegs,
nothing more, but, crucially, nothing less &ndash; and it does so as fast and as
lean as possible. By focusing on these needs, I was able to implement a
solution that&rsquo;s about an order of magnitude faster and weighs only 10% of
SmartyPants file size-wise. And yes: Both of these values are SWAGs and
shouldn&rsquo;t be relied on for, well, anything.</p>

<p>Right after I published SwiftSuspenders on GitHub &ndash; as you should do with
everything you build that might be of help to your esteemed colleagues &ndash;
awesome stuff happened: Shaun Smith immediately forked to project, started
fixing bugs and embarrasing mistakes in the documentation and switched most of
the <a href="http://github.com/darscan/robotlegsdemos">examples for RobotLegs</a> to
using SwiftSuspenders and hinted at creating unit tests &ndash; which I shamefully
neglected. Yesterday, he followed up on that and pushed a range of unit tests
to a new <a href="http://github.com/darscan/SwiftSuspendersTests">GitHub project</a>!</p>

<h4>What now?</h4>

<p>Apart from you reading the <a href="http://github.com/tschneidereit/SwiftSuspenders/blob/master/README.textile">introductory documentation</a>, starting to use
SwiftSuspenders and forking it on GitHub? I&rsquo;m not sure.</p>

<p>I think that maybe, SwiftSuspenders is pretty much done as it is. SmartyPants
still has <a href="http://code.google.com/p/smartypants-ioc/wiki/Rules">some features</a>
that SwiftSuspenders doesn&rsquo;t, but for now, I don&rsquo;t think that those are really
essential. Then again, I might implement Provider Binding and Rule Binding
sometimes later &ndash; whereas I can almost guarantee that I won&rsquo;t implement live
bindings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On finding Unicode ranges]]></title>
    <link href="http://tschneidereit.github.io/2009/06/06/on-finding-unicode-ranges/"/>
    <updated>2009-06-06T20:14:20+02:00</updated>
    <id>http://tschneidereit.github.io/2009/06/06/on-finding-unicode-ranges</id>
    <content type="html"><![CDATA[<p>Most people don&rsquo;t think in <a href="http://en.wikipedia.org/wiki/Code_points">code points</a> &ndash; which seems like a pretty
good state of the world to me.</p>

<p>The only downside is that dealing with fonts for Flash applications and
<a href="http://blog.typekit.com/2009/05/27/introducing-typekit/">sooner</a> or
<a href="http://www.microsoft.com/windows/Internet-explorer/default.aspx">later</a> <a href="http://www.w3.org/TR/css3-webfonts/#dataqual">the whole web</a> is far more
complicated than it would otherwise be. Let me explain.</p>

<p>Each time your client requests you use their corporate typface or your
designer decides that he absolutely, positively can&rsquo;t use a web-safe font for
some other reason, you have to somehow get font glyphs to the user that he
doesn&rsquo;t already have installed on his machine. In html, this is mostly done
using png&rsquo;s, increasing the download time and the complexity of changing the
content. But at least for Flash you can instead embed the glyphs and keep your
content as text. How do you do that? You embed the font in your swf and let
the Flash player use it to render the content.</p>

<p>Now what you don&rsquo;t want to do is embed the whole font, because that&rsquo;ll add
between several dozen kb and several mb (no kidding!) to your swf. Instead,
you&rsquo;ll want to embed only the glyphs you need to display your content. And
this is where Unicode code points come into the picture: You need to use those
to <a href="http://livedocs.adobe.com/flex/3/html/help.html?content=fonts_07.html#131075">tell the compiler which glyphs to embed</a>.</p>

<p>To make a long story short, you&rsquo;ll have to find out which Unicode ranges to
use to make the compiler embed the glyphs you need. And for that, I&rsquo;ve written
a small JavaScript tool, which allows you to enter ranges of characters or
just a bunch of text, which it then converts into an optimally reduced set of
Unicode ranges.</p>

<p><a href="http://tschneidereit.github.io/assets/unicode-range-tool/unicode_range_tool.html">You can find this tool here, I hope you find it useful and not too ugly.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction]]></title>
    <link href="http://tschneidereit.github.io/2009/06/06/introduction/"/>
    <updated>2009-06-06T18:39:04+02:00</updated>
    <id>http://tschneidereit.github.io/2009/06/06/introduction</id>
    <content type="html"><![CDATA[<p>To the world at large and you who is reading this in particular: Hello!</p>

<p>As seems pertinent for an introductory blog post, let me tell you a little bit
about myself and what you can expect to read here in the future.</p>

<p><em><strong>Update:</strong> This is oh so very much outdated that you shouldn&rsquo;t even read it. Really.</em></p>

<p>I am a web developer mostly concentrated on solving highly technical, rather
abstract problems using ActionScript and other front end web development
technologies. That is to say: I&rsquo;m a Flash developer, but in contrast to many
of my peers, I&rsquo;m not too interested in fancy animations and gratuitous
effects. Thus, I&rsquo;m drawn not the quickly built, glossy high end projects that
dominate the Flash world but to the invisible technical challenges that lie
behind each well-built site or application.</p>

<p>I constantly re-evaluate my views on what is a good balance between pragmatism
and theoretical soundness in my daily work, trying to stay on the right side
of the boundary between writing <a href="http://en.wikipedia.org/wiki/Spaghetti_code">maintainable code</a>
and becoming an <a href="http://www.joelonsoftware.com/articles/fog0000000018.html">architecture astronaut</a>.</p>

<p>For the last two and a half years, I&rsquo;ve lead the Flash development team at
<a href="http://www.fork.de/">Fork unstable media</a>. Before that, I worked as a
freelancer for about seven years and studied philosophy and an ever-changing
assortment of minor fields.</p>

<p>As of July 2009, I will be a co-founder of a yet-to-be-named startup located
in Hamburg, Germany. What are we going to do? Mostly two things:</p>

<ol>
<li>Work as a technical sub-contractor for for internet agencies, concentrating on websites, applications and presentations mostly done in Adobe Flash.</li>
<li>Try to <a href="http://github.com/tschneidereit/reprise/tree/master">cross the chasm</a> that lies between the proprietary world of Flash and the standards-based rest of the web-universe.</li>
</ol>


<p>Should you <a href="http://blog.tillschneidereit.de/atom.xml">decide to return</a>,
I&rsquo;ll tell you a lot more about this second aspect of what we&rsquo;re going to do
and about why I think that we&rsquo;re going to fill an important niche.</p>
]]></content>
  </entry>
  
</feed>
